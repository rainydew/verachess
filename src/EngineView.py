#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 25, 2019 11:31:56 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import EngineView_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    EngineView_support.set_Tk_var()
    top = Toplevel1(root)
    EngineView_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    EngineView_support.set_Tk_var()
    top = Toplevel1(w)
    EngineView_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("800x510+0+0")
        top.title("引擎选择")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(x=50, y=20, height=28)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(text='''白方引擎''')

        self.WhiteEngine = ttk.Combobox(top)
        self.WhiteEngine.place(x=50, y=50, height=28, width=205)
        self.WhiteEngine.configure(textvariable=EngineView_support.WhiteEngineChoosen)
        self.WhiteEngine.configure(state="readonly")

        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(x=50, y=100, height=28)
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(text='''黑方引擎''')

        self.BlackEngine = ttk.Combobox(top)
        self.BlackEngine.place(x=50, y=130, height=28, width=205)
        self.BlackEngine.configure(textvariable=EngineView_support.BlackEngineChoosen)
        self.BlackEngine.configure(state="readonly")

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(x=50, y=170, height=28)
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(text='''可用引擎''')

        self.EngineSpinBox = ScrolledListBox(top)
        self.EngineSpinBox.place(x=50, y=200, height=300, width=205)
        self.EngineSpinBox.configure(listvariable=EngineView_support.ListSelect)

        self.EngCountry = ttk.Combobox(top)
        self.EngCountry.place(x=310, y=130, height=28, width=170)
        self.EngCountry.configure(textvariable=EngineView_support.EngCountryVar)
        self.EngCountry.configure(state="readonly")

        self.EngFlag = tk.Label(top)
        self.EngFlag.place(x=481, y=127, height=34, width=54)
        self.EngFlag.configure(image=EngineView_support.FlagImg)

        self.Label1_3 = tk.Label(top)
        self.Label1_3.place(x=310, y=100, height=28)
        self.Label1_3.configure(background="#d9d9d9")
        self.Label1_3.configure(text='''所属国家''')

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(x=310, y=20, height=28)
        self.Label1_4.configure(background="#d9d9d9")
        self.Label1_4.configure(text='''名称''')

        self.EngName = tk.Entry(top)
        self.EngName.place(x=310, y=50, height=29, width=225)
        self.EngName.configure(textvariable=EngineView_support.EngNameVar)

        self.Label1_5 = tk.Label(top)
        self.Label1_5.place(x=310, y=170, height=28)
        self.Label1_5.configure(background="#d9d9d9")
        self.Label1_5.configure(text='''引擎文件运行命令行''')

        self.OpenExe = tk.Button(top)
        self.OpenExe.place(x=480, y=170, height=28, width=55)
        self.OpenExe.configure(background="#d9d9d9")
        self.OpenExe.configure(text='''浏览''')
        self.OpenExe.configure(command=EngineView_support.view)

        self.EngCommand = tk.Entry(top)
        self.EngCommand.place(x=310, y=200, height=28, width=225)
        self.EngCommand.configure(textvariable=EngineView_support.EngCommandVar)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(x=310, y=230, height=28)
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(text='''引擎控制台换行符''')

        self.EngEnding = ttk.Combobox(top)
        self.EngEnding.place(x=310, y=260, height=28, width=225)
        self.EngEnding.configure(textvariable=EngineView_support.EngEndingVar)
        self.EngEnding.configure(state="readonly")
        self.EngEnding.configure(values=r"\\r\\n \\n")

        self.UciSet = tk.Button(top)
        self.UciSet.place(x=310, y=350, height=33, width=92)
        self.UciSet.configure(background="#d9d9d9")
        self.UciSet.configure(command=EngineView_support.configure)
        self.UciSet.configure(text='''编辑UCI选项''')

        self.UciReset = tk.Button(top)
        self.UciReset.place(x=310, y=400, height=33, width=92)
        self.UciReset.configure(background="#d9d9d9")
        self.UciReset.configure(command=EngineView_support.stash)
        self.UciReset.configure(text='''重置UCI配置''')

        self.Quit = tk.Button(top)
        self.Quit.place(x=310, y=450, height=33, width=92)
        self.Quit.configure(background="#d9d9d9")
        self.Quit.configure(command=EngineView_support.c_close)
        self.Quit.configure(text='''关闭窗口''')

        self.UciNew = tk.Button(top)
        self.UciNew.place(x=443, y=350, height=33, width=92)
        self.UciNew.configure(background="#d9d9d9")
        self.UciNew.configure(command=EngineView_support.new)
        self.UciNew.configure(text='''新增引擎''')

        self.Copy = tk.Button(top)
        self.Copy.place(x=443, y=400, height=33, width=92)
        self.Copy.configure(background="#d9d9d9")
        self.Copy.configure(command=EngineView_support.c_copy)
        self.Copy.configure(text='''复制引擎''')

        self.UciDel = tk.Button(top)
        self.UciDel.place(x=443, y=450, height=33, width=92)
        self.UciDel.configure(background="#d9d9d9")
        self.UciDel.configure(command=EngineView_support.delete)
        self.UciDel.configure(text='''移除引擎''')

        self.WB2UCI = tk.Checkbutton(top)
        self.WB2UCI.place(x=300, y=300, height=28)
        self.WB2UCI.configure(background="#d9d9d9")
        self.WB2UCI.configure(text='''使用Winboard协议转换器(待开发)''')
        self.WB2UCI.configure(variable=EngineView_support.UseWb2Uci)
        self.WB2UCI.configure(state="disabled")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(x=580, y=20, height=470)
        self.TSeparator1.configure(orient="vertical")

        self.Label5 = tk.Label(top)
        self.Label5.place(x=610, y=20, height=28)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(text='''引擎通用设置：''')

        self.Label1_8 = tk.Label(top)
        self.Label1_8.place(x=610, y=50, height=28)
        self.Label1_8.configure(background="#d9d9d9")
        self.Label1_8.configure(text='''引擎优先级''')

        self.EngPriority = ttk.Combobox(top)
        self.EngPriority.place(x=610, y=80, height=28, width=155)
        self.EngPriority.configure(textvariable=EngineView_support.EngPriorityVar)
        self.EngPriority.configure(state="readonly")
        self.EngPriority.configure(values="中 中低")

        self.CommonHash = tk.Checkbutton(top)
        self.CommonHash.place(x=600, y=120, height=28)
        self.CommonHash.configure(background="#d9d9d9")
        self.CommonHash.configure(text='''统一内存(哈希表)用量''')
        self.CommonHash.configure(variable=EngineView_support.UseHash)

        self.CHash = tk.Entry(top)
        self.CHash.place(x=610, y=150, height=28, width=105)
        self.CHash.configure(textvariable=EngineView_support.CHashVar)

        self.Label2 = tk.Label(top)
        self.Label2.place(x=730, y=150, height=28)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(text='''MB''')

        self.CommonCpus = tk.Checkbutton(top)
        self.CommonCpus.place(x=600, y=190, height=28)
        self.CommonCpus.configure(background="#d9d9d9")
        self.CommonCpus.configure(text='''统一CPU核心/线程数''')
        self.CommonCpus.configure(variable=EngineView_support.UseCpu)

        self.CCpu = tk.Entry(top)
        self.CCpu.place(x=610, y=220, height=28, width=105)
        self.CCpu.configure(textvariable=EngineView_support.CCpuVar)

        self.Label2_1 = tk.Label(top)
        self.Label2_1.place(x=730, y=220, height=28)
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(text='''线程''')

        self.Label1_9 = tk.Label(top)
        self.Label1_9.place(x=610, y=260, height=28)
        self.Label1_9.configure(background="#d9d9d9")
        self.Label1_9.configure(text='''CPU温度监控''')

        self.TempConfine = tk.Checkbutton(top)
        self.TempConfine.place(x=600, y=290, height=28)
        self.TempConfine.configure(background="#d9d9d9")
        self.TempConfine.configure(text='''启用并限制到''')
        self.TempConfine.configure(variable=EngineView_support.WatchTemp)

        self.CpuTempLine = tk.Entry(top)
        self.CpuTempLine.place(x=610, y=320, height=28, width=105)
        self.CpuTempLine.configure(textvariable=EngineView_support.CpuTempVar)

        self.Label2_2 = tk.Label(top)
        self.Label2_2.place(x=730, y=320, height=28)
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(text='''度''')

        self.Label3 = tk.Label(top)
        self.Label3.place(x=610, y=360, height=28)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(text='''系统可用内存监控''')

        self.MemConfine = tk.Checkbutton(top)
        self.MemConfine.place(x=600, y=390, height=28)
        self.MemConfine.configure(background="#d9d9d9")
        self.MemConfine.configure(text='''启动并至少保留''')
        self.MemConfine.configure(variable=EngineView_support.WatchMem)

        self.MemKeepLine = tk.Entry(top)
        self.MemKeepLine.place(x=610, y=420, height=28, width=105)
        self.MemKeepLine.configure(textvariable=EngineView_support.MemLimitVar)

        self.Label4 = tk.Label(top)
        self.Label4.place(x=730, y=420, height=28)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(text='''MB''')

        self.MemLeakConfine = tk.Checkbutton(top)
        self.MemLeakConfine.place(x=600, y=460, height=28)
        self.MemLeakConfine.configure(background="#d9d9d9")
        self.MemLeakConfine.configure(text='''监测引擎内存泄漏''')
        self.MemLeakConfine.configure(variable=EngineView_support.WatchMemLeak)

        top.bind('<Destroy>', lambda e: EngineView_support.destruct(e))


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
