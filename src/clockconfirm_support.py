#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Oct 31, 2019 12:36:36 AM CST  platform: Windows NT

from typing import List
import clockconfirm
import easygui

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

WhiteMinEntry = BlackMinEntry = WhiteSecEntry = BlackSecEntry = WhiteIncEntry = BlackIncEntry = Cmv = CpuUnit = \
    CpuRebal = CpuSet = Sync = None  # type: tk.Variable
w = None  # type: clockconfirm.MainWindow


def set_Tk_var():
    global WhiteMinEntry
    WhiteMinEntry = tk.IntVar(value="5")
    global BlackMinEntry
    BlackMinEntry = tk.IntVar(value="5")
    global WhiteSecEntry
    WhiteSecEntry = tk.IntVar(value="0")
    global BlackSecEntry
    BlackSecEntry = tk.IntVar(value="0")
    global WhiteIncEntry
    WhiteIncEntry = tk.IntVar(value="3")
    global BlackIncEntry
    BlackIncEntry = tk.IntVar(value="3")
    global Cmv
    Cmv = tk.StringVar(value="UseDepth")
    global CpuUnit
    CpuUnit = tk.StringVar(value="步(半回合)")
    global CpuRebal
    CpuRebal = tk.DoubleVar(value="1.0")
    global CpuSet
    CpuSet = tk.DoubleVar(value="16")
    global Sync
    Sync = tk.BooleanVar(value=True)


def refresh_tk_var():
    WhiteMinEntry.set("5")
    BlackMinEntry.set("5")
    WhiteSecEntry.set("0")
    BlackSecEntry.set("0")
    WhiteIncEntry.set("3")
    BlackIncEntry.set("3")
    Cmv.set("UseDepth")
    CpuUnit.set("步(半回合)")
    CpuRebal.set("1.0")
    CpuSet.set("16")
    Sync.set(True)
    SynSet()


def SynSet():
    off = "disabled"
    on = "normal"
    if Sync.get():
        w.BlackInc.configure(state=off)
        w.BlackTotalMinute.configure(state=off)
        w.BlackTotalSecond.configure(state=off)
        w.BlackInc.configure(textvariable=WhiteIncEntry)
        w.BlackTotalMinute.configure(textvariable=WhiteMinEntry)
        w.BlackTotalSecond.configure(textvariable=WhiteSecEntry)
    else:
        w.BlackInc.configure(state=on)
        w.BlackTotalMinute.configure(state=on)
        w.BlackTotalSecond.configure(state=on)
        try:
            BlackIncEntry.set(WhiteIncEntry.get())
        except tk.TclError:
            pass
        try:
            BlackMinEntry.set(WhiteMinEntry.get())
        except tk.TclError:
            pass
        try:
            BlackSecEntry.set(WhiteSecEntry.get())
        except tk.TclError:
            pass
        w.BlackInc.configure(textvariable=BlackIncEntry)
        w.BlackTotalMinute.configure(textvariable=BlackMinEntry)
        w.BlackTotalSecond.configure(textvariable=BlackSecEntry)


def Cancel():
    destroy_window()


def Confirm():
    checked_vars = [WhiteMinEntry, WhiteSecEntry, WhiteIncEntry, CpuSet, CpuRebal, Sync]  # type: List[tk.Variable]
    if not Sync.get():
        checked_vars.extend([BlackMinEntry, BlackSecEntry, BlackIncEntry])
    for entry in checked_vars:
        try:
            before = entry.get()
            entry.set(before)
            assert before >= 0  # assert after ensuring entry is a number
            if abs(float(entry.get()) - float(before)) > 1e-06 and not easygui.ynbox(
                    "由于精度限制，数值{}将被替换为{}，继续操作吗？".format(before, entry.get()), "要求整数",
                    ["是", "否"]):
                return
        except (tk.TclError, AssertionError):
            entry.set("输入错误")
            return
    checked_vars.extend([Cmv])  # string vars here
    g = globals().items()
    w.Result = {[k for k, v in g if v == var][0]: var.get() for var in checked_vars}
    destroy_window()


def Default():
    refresh_tk_var()


def OptionChange():
    cmv = Cmv.get()
    if cmv == "UseDepth":
        CpuUnit.set("步(半回合)")
        CpuSet.set("16")
    elif cmv == "UseTimer":
        CpuUnit.set("秒/步")
        CpuSet.set("2")
    elif cmv == "UseNode":
        CpuUnit.set("百万节点/步")
        CpuSet.set("10")
    else:
        raise NotImplementedError("not supported")


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    for k, v in kwargs.items():
        globals().get(k).set(v)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
