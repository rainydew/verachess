#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 09, 2019 03:15:20 AM CST  platform: Windows NT

import easygui
import verachess_support
from verachess_global import Globals
from match import today, now
from consts import Role, Winner, Termination as cTermination

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

WPlayer = BPlayer = WElo = BElo = Event = Site = Round = Date = MTime = Termination = TDetail = \
    None  # type: tk.StringVar
SScore = SDepth = STime = SNodes = SNps = STb = SPv = None  # type: tk.BooleanVar
WType = BType = Result = None    # type: tk.IntVar
TCMin = TCSec = None    # type: tk.DoubleVar
w = None    # type: gameinfo.Toplevel1


def set_Tk_var():
    global WPlayer, BPlayer, WElo, BElo, WType, BType, Event, Site, Round, Result, Date, MTime, TCMin, TCSec, \
        Termination, TDetail, SScore, SDepth, STime, SNodes, SNps, STb, SPv
    WPlayer = tk.StringVar(value='')
    BPlayer = tk.StringVar(value='')
    WElo = tk.StringVar(value='')
    BElo = tk.StringVar(value='')
    WType = tk.IntVar(value=Role.human)
    BType = tk.IntVar(value=Role.human)
    Event = tk.StringVar(value='')
    Site = tk.StringVar(value='verachess 5.0')
    Round = tk.StringVar(value='')
    Result = tk.IntVar(value=Winner.unknown)
    Date = tk.StringVar(value=today())
    MTime = tk.StringVar(value=now())
    TCMin = tk.DoubleVar(value=5.0)
    TCSec = tk.DoubleVar(value=3.0)
    Termination = tk.StringVar(value=cTermination.unterminated)
    TDetail = tk.StringVar(value="")
    SScore = tk.BooleanVar(value=True)
    SDepth = tk.BooleanVar(value=True)
    STime = tk.BooleanVar(value=True)
    SNodes = tk.BooleanVar(value=True)
    SNps = tk.BooleanVar(value=True)
    STb = tk.BooleanVar(value=True)
    SPv = tk.BooleanVar(value=True)


def reset_var():
    WPlayer.set('')
    BPlayer.set('')
    WElo.set('')
    BElo.set('')
    WType.set(Role.human)
    BType.set(Role.human)
    Event.set('')
    Site.set('verachess 5.0')
    Round.set('')
    Result.set(Winner.unknown)
    Date.set(today())
    MTime.set(now())
    TCMin.set(5.0)
    TCSec.set(3.0)
    Termination.set(cTermination.unterminated)
    TDetail.set(True)
    SScore.set(True)
    SDepth.set(True)
    STime.set(True)
    SNodes.set(True)
    SNps.set(True)
    STb.set(True)
    SPv.set(True)


def all_reverse():
    tuple(map(lambda v: v.set(not int(v.get())), (SScore, SDepth, STime, SNodes, SNps, STb, SPv)))
    # v.get is str then "0" -> True


def all_save():
    if w.AllSave.cget("relief") == "raised":
        w.AllSave.configure(relief="sunken")
        tuple(map(lambda v: v.set(True), (SScore, SDepth, STime, SNodes, SNps, STb, SPv)))
    else:
        w.AllSave.configure(relief="raised")
        tuple(map(lambda v: v.set(False), (SScore, SDepth, STime, SNodes, SNps, STb, SPv)))


# events
def cancel():
    destroy_window()


def clear():
    reset_var()


def sync():
    verachess_support.Hooks.update_game_info()
    info = Globals.GameInfo
    gl_dic = {
            "WPlayer": WPlayer,
            "BPlayer": BPlayer,
            "WElo": WElo,
            "BElo": BElo,
            "WType": WType,
            "BType": BType,
            "Event": Event,
            "Site": Site,
            "Round": Round,
            "Result": Result,
            "Date": Date,
            "MTime": MTime,
            "TCMin": TCMin,
            "TCSec": TCSec,
            "Termination": Termination,
            "TDetail": TDetail,
            "SScore": SScore,
            "SDepth": SDepth,
            "STime": STime,
            "SNodes": SNodes,
            "SNps": SNps,
            "STb": STb,
            "SPv": SPv,
        }
    for k, v in info.items():
        gl_dic[k].set(v)


def confirm():
    try:
        res = {
            "WPlayer": WPlayer.get(),
            "BPlayer": BPlayer.get(),
            "WElo": WElo.get(),
            "BElo": BElo.get(),
            "WType": int(WType.get()),
            "BType": int(BType.get()),
            "Event": Event.get(),
            "Site": Site.get(),
            "Round": Round.get(),
            "Result": int(Result.get()),
            "Date": Date.get(),
            "MTime": MTime.get(),
            "TCMin": float(TCMin.get()),
            "TCSec": float(TCSec.get()),
            "Termination": Termination.get(),
            "TDetail": TDetail.get(),
            "SScore": int(SScore.get()),
            "SDepth": int(SDepth.get()),
            "STime": int(STime.get()),
            "SNodes": int(SNodes.get()),
            "SNps": int(SNps.get()),
            "STb": int(STb.get()),
            "SPv": int(SPv.get()),
        }
    except:
        easygui.msgbox("参数值有误，比赛时限必须是整数或小数")
        return
    w.Result = res
    destroy_window()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
