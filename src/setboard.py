#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 06, 2019 11:08:58 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import setboard_support
from consts import Font, Color, gen_empty_board, Pieces
from setboard_global import Globals
from typing import List


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    setboard_support.set_Tk_var()
    top = MainWindow(root)
    setboard_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    setboard_support.set_Tk_var()
    top = MainWindow(w)
    setboard_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("560x560+406+218")
        top.title("设置棋局")
        top.configure(background="#d9d9d9")

        self.ChessBoard = tk.Frame(top)
        self.ChessBoard.place(x=0, y=0, height=385, width=385)
        self.ChessBoard.configure(relief='ridge')
        self.ChessBoard.configure(borderwidth="1")
        self.ChessBoard.configure(background="#d9d9d9")

        self.Confirm = tk.Button(top)
        self.Confirm.place(x=60, y=500, height=33, width=72)
        self.Confirm.configure(background="#d9d9d9")
        self.Confirm.configure(command=setboard_support.confirm)
        self.Confirm.configure(text='''确定''')

        self.Clear = tk.Button(top)
        self.Clear.place(x=190, y=500, height=33, width=72)
        self.Clear.configure(background="#d9d9d9")
        self.Clear.configure(command=setboard_support.clear)
        self.Clear.configure(text='''清空''')

        self.Flip = tk.Button(top)
        self.Flip.place(x=320, y=500, height=33, width=72)
        self.Flip.configure(background="#d9d9d9")
        self.Flip.configure(command=setboard_support.flip)
        self.Flip.configure(textvariable=setboard_support.FlipVar)

        self.Cancel = tk.Button(top)
        self.Cancel.place(x=450, y=500, height=33, width=72)
        self.Cancel.configure(background="#d9d9d9")
        self.Cancel.configure(command=setboard_support.cancel)
        self.Cancel.configure(text='''清空''')

        self.Rows = self.Columns = None  # type: List[tk.Label]
        self.Cells = None  # type: List[List[tk.Label]]
        self.Pieces = None  # type: List[tk.Radiobutton]

        create_rows(self, top)
        create_columns(self, top)
        create_cells(self, top)
        create_pieces(self, top)

        self.Result = None  # to return a result


def create_columns(main: MainWindow, top: tk.Tk):
    main.Columns = []
    for i in range(8):
        column = tk.Label(top)
        column.place(x=i * 48, y=385, height=16, width=48)
        column.configure(background=Color.cyan_light if i % 2 else Color.cyan_dark)
        column.configure(text=chr(65 + i))
        column.configure(relief="raised")
        column.configure(font=Font.add_bold)
        main.Columns.append(column)

        Globals.Column_names.append(str(column))


def create_rows(main: MainWindow, top: tk.Tk):
    main.Rows = []
    for i in range(8):
        row = tk.Label(top)
        row.place(x=385, y=i * 48, height=48, width=16)
        row.configure(background=Color.pink_light if i % 2 else Color.pink_dark)
        row.configure(text=str(8 - i))
        row.configure(relief="raised")
        row.configure(font=Font.add_bold)
        main.Rows.append(row)

        Globals.Row_names.append(str(row))


def create_cells(main: MainWindow, top: tk.Frame):
    main.Cells = gen_empty_board()
    Globals.Board_array = gen_empty_board()
    Globals.Cell_names = gen_empty_board()
    Globals.Reverse_cell_names = {}
    for r in range(8):
        for c in range(8):
            box = tk.Label(top)
            box.place(x=c * 48, y=r * 48, height=48, width=48)  # i行j列
            box.configure(background=Color.yellow_dark if (r + c) % 2 else Color.yellow_light)
            box.configure(relief="groove")
            box.configure(font=Font.font_24)

            box.configure(textvariable=setboard_support.CellValues[r][c])
            box.bind('<ButtonRelease-1>', lambda e: setboard_support.cell_click(e))

            Globals.Cell_names[r][c] = str(box)
            Globals.Reverse_cell_names[str(box)] = (r, c)
            main.Cells[r][c] = box


def create_pieces(main: MainWindow, top: tk.Tk):
    main.Pieces = []
    lx, rx = 410, 490
    base_y = 30
    for i, (p_name, p_shape) in enumerate(Pieces.items()):
        piece = tk.Radiobutton(top)
        piece.place(x=lx if p_name.isupper() else rx, y=base_y + (i // 2) * 60, height=30, width=60)
        piece.configure(background="#d9d9d9")
        piece.configure(text=p_shape)
        piece.configure(value=p_name)
        piece.configure(font=Font.font_18)
        piece.configure(variable=setboard_support.PName)

        main.Pieces.append(piece)


if __name__ == '__main__':
    vp_start_gui()
