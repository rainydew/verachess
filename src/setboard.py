#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 06, 2019 11:08:58 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import setboard_support
from consts import Font, Color, gen_empty_board, Pieces
from setboard_global import Globals
from typing import List
from tooltip import ToolTip

w = None


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    setboard_support.set_Tk_var()
    top = MainWindow(root)

    Globals.Main = top

    setboard_support.init(root, top)
    root.mainloop()
    print(top.Result)


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    setboard_support.set_Tk_var()
    top = MainWindow(w)

    Globals.Main = top

    setboard_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("560x620+406+218")
        top.title("设置棋局")
        top.configure(background="#d9d9d9")

        self.ChessBoard = tk.Frame(top)
        self.ChessBoard.place(x=0, y=0, height=385, width=385)
        self.ChessBoard.configure(relief='ridge')
        self.ChessBoard.configure(borderwidth="1")
        self.ChessBoard.configure(background="#d9d9d9")

        self.Confirm = tk.Button(top)
        self.Confirm.place(x=20, y=570, height=33, width=64)
        self.Confirm.configure(background="#d9d9d9")
        self.Confirm.configure(command=setboard_support.confirm)
        self.Confirm.configure(text='''确定''')

        self.Copy = tk.Button(top)
        self.Copy.place(x=105, y=570, height=33, width=64)
        self.Copy.configure(background="#d9d9d9")
        self.Copy.configure(command=setboard_support.copy)
        self.Copy.configure(text='''复制局面''')

        self.Clear = tk.Button(top)
        self.Clear.place(x=190, y=570, height=33, width=64)
        self.Clear.configure(background="#d9d9d9")
        self.Clear.configure(command=setboard_support.clear)
        self.Clear.configure(text='''清空''')

        self.Flip = tk.Button(top)
        self.Flip.place(x=275, y=570, height=33, width=64)
        self.Flip.configure(background="#d9d9d9")
        self.Flip.configure(command=setboard_support.flip)
        self.Flip.configure(textvariable=setboard_support.FlipVar)

        self.Cancel = tk.Button(top)
        self.Cancel.place(x=360, y=570, height=33, width=64)
        self.Cancel.configure(background="#d9d9d9")
        self.Cancel.configure(command=setboard_support.cancel)
        self.Cancel.configure(text='''取消''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(x=440, y=410, height=190)
        self.TSeparator1.configure(orient="vertical")

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(x=20, y=510, width=520)

        self.Label3 = tk.Label(top)
        self.Label3.place(x=190, y=400, height=26)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''易位设置''')

        self.Label4 = tk.Label(top)
        self.Label4.place(x=460, y=400, height=26)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''行棋方''')

        self.Label2 = tk.Label(top)
        self.Label2.place(x=460, y=520, height=26)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(foreground=Color.blue)
        self.Label2.configure(text='''过路兵列''')
        ToolTip(self.Label2, "若刚刚有一个兵直进两步，则需要设置这个兵所在的列")

        self.Normal = tk.Radiobutton(top)
        self.Normal.place(x=20, y=430, height=30)
        self.Normal.configure(background="#d9d9d9")
        self.Normal.configure(text='''普通''')
        self.Normal.configure(value="normal")
        self.Normal.configure(variable=setboard_support.C960switch)

        self.C960 = tk.Radiobutton(top)
        self.C960.place(x=20, y=470, height=30)
        self.C960.configure(background="#d9d9d9")
        self.C960.configure(text='''Chess960''')
        self.C960.configure(value="c960")
        self.C960.configure(variable=setboard_support.C960switch)

        self.Label1 = tk.Label(top)
        self.Label1.place(x=120, y=430, height=26)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(foreground=Color.blue)
        self.Label1.configure(text='''王翼车列号''')
        ToolTip(self.Label1, "王翼车的起始列，大小写均可，在chess960下需要指定")

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(x=120, y=470, height=26)
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(foreground=Color.blue)
        self.Label1_2.configure(text='''后翼车列号''')
        ToolTip(self.Label1_2, "后翼车的起始列，大小写均可，在chess960下需要指定")

        self.KingSide = tk.Entry(top)
        self.KingSide.place(x=210, y=430, height=28, width=35)
        self.KingSide.configure(state='disabled')
        self.KingSide.configure(textvariable=setboard_support.RrCol)

        self.QueenSide = tk.Entry(top)
        self.QueenSide.place(x=210, y=470, height=28, width=35)
        self.QueenSide.configure(state='disabled')
        self.QueenSide.configure(textvariable=setboard_support.LrCol)

        self.WKCastle = tk.Checkbutton(top)
        self.WKCastle.place(x=240, y=430, height=30)
        self.WKCastle.configure(background="#d9d9d9")
        self.WKCastle.configure(text='''白方O-O''')
        self.WKCastle.configure(variable=setboard_support.Wkcast)

        self.WQCastle = tk.Checkbutton(top)
        self.WQCastle.place(x=330, y=430, height=30)
        self.WQCastle.configure(background="#d9d9d9")
        self.WQCastle.configure(text='''白方O-O-O''')
        self.WQCastle.configure(variable=setboard_support.Wqcast)

        self.BKCastle = tk.Checkbutton(top)
        self.BKCastle.place(x=240, y=470, height=30)
        self.BKCastle.configure(background="#d9d9d9")
        self.BKCastle.configure(text='''黑方O-O''')
        self.BKCastle.configure(variable=setboard_support.Bkcast)

        self.BQCastle = tk.Checkbutton(top)
        self.BQCastle.place(x=330, y=470, height=30)
        self.BQCastle.configure(background="#d9d9d9")
        self.BQCastle.configure(text='''黑方O-O-O''')
        self.BQCastle.configure(variable=setboard_support.Bqcast)

        self.WMove = tk.Radiobutton(top)
        self.WMove.place(x=450, y=430, height=30)
        self.WMove.configure(background="#d9d9d9")
        self.WMove.configure(text='''白方''')
        self.WMove.configure(value="w")
        self.WMove.configure(variable=setboard_support.Mover)

        self.BMove = tk.Radiobutton(top)
        self.BMove.place(x=450, y=470, height=30)
        self.BMove.configure(background="#d9d9d9")
        self.BMove.configure(text='''黑方''')
        self.BMove.configure(value="b")
        self.BMove.configure(variable=setboard_support.Mover)

        self.Label5 = tk.Label(top)
        self.Label5.place(x=20, y=520, height=26)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(foreground=Color.blue)
        self.Label5.configure(text='''和棋计数''')
        ToolTip(self.Label5, "截至当前局面，双方未动兵且未吃子的步数。该数达到100即触发50回合和棋规则")

        self.Draw = tk.Entry(top)
        self.Draw.place(x=140, y=520, height=28, width=70)
        self.Draw.configure(textvariable=setboard_support.Drawmove)

        self.Label5_9 = tk.Label(top)
        self.Label5_9.place(x=230, y=520, height=26)
        self.Label5_9.configure(background="#d9d9d9")
        self.Label5_9.configure(foreground=Color.blue)
        self.Label5_9.configure(text='''回合计数''')
        ToolTip(self.Label5_9, "从开局到现在总共的回合数，双方各走一步算1回合。这个参数不重要，只用于棋谱记录")

        self.MoveCount = tk.Entry(top)
        self.MoveCount.place(x=340, y=520, height=28, width=70)
        self.MoveCount.configure(textvariable=setboard_support.Totalmove)

        self.Spinbox1 = tk.Spinbox(top)
        self.Spinbox1.configure(values=("-", "a", "b", "c", "d", "e", "f", "g", "h"))
        self.Spinbox1.place(x=460, y=560, height=30, width=70)
        self.Spinbox1.configure(textvariable=setboard_support.EpCol)

        self.Rows = self.Columns = None  # type: List[tk.Label]
        self.Cells = None  # type: List[List[tk.Label]]
        self.Pieces = None  # type: List[tk.Radiobutton]

        create_rows(self, top)
        create_columns(self, top)
        create_cells(self, top)
        create_pieces(self, top)

        self.Result = None  # to return a result


def create_columns(main: MainWindow, top: tk.Tk):
    main.Columns = []
    for i in range(8):
        column = tk.Label(top)
        column.place(x=i * 48, y=385, height=16, width=48)
        column.configure(background=Color.cyan_light if i % 2 else Color.cyan_dark)
        column.configure(text=chr(65 + i))
        column.configure(relief="raised")
        column.configure(font=Font.add_bold)
        main.Columns.append(column)

        Globals.Column_names.append(str(column))


def create_rows(main: MainWindow, top: tk.Tk):
    main.Rows = []
    for i in range(8):
        row = tk.Label(top)
        row.place(x=385, y=i * 48, height=48, width=16)
        row.configure(background=Color.pink_light if i % 2 else Color.pink_dark)
        row.configure(text=str(8 - i))
        row.configure(relief="raised")
        row.configure(font=Font.add_bold)
        main.Rows.append(row)

        Globals.Row_names.append(str(row))


def create_cells(main: MainWindow, top: tk.Frame):
    main.Cells = gen_empty_board()
    Globals.Board_array = gen_empty_board()
    Globals.Cell_names = gen_empty_board()
    Globals.Reverse_cell_names = {}
    for r in range(8):
        for c in range(8):
            box = tk.Label(top)
            box.place(x=c * 48, y=r * 48, height=48, width=48)  # i行j列
            box.configure(background=Color.yellow_dark if (r + c) % 2 else Color.yellow_light)
            box.configure(relief="groove")
            box.configure(font=Font.font_24)

            box.configure(textvariable=setboard_support.CellValues[r][c])
            box.bind('<ButtonRelease-1>', lambda e: setboard_support.cell_click(e))

            Globals.Cell_names[r][c] = str(box)
            Globals.Reverse_cell_names[str(box)] = (r, c)
            main.Cells[r][c] = box


def create_pieces(main: MainWindow, top: tk.Tk):
    main.Pieces = []
    lx, rx = 410, 490
    base_y = 30
    for i, (p_name, p_shape) in enumerate(Pieces.items()):
        piece = tk.Radiobutton(top)
        piece.place(x=lx if p_name.isupper() else rx, y=base_y + (i // 2) * 60, height=30, width=60)
        piece.configure(background="#d9d9d9")
        piece.configure(text=p_shape)
        piece.configure(value=p_name)
        piece.configure(font=Font.font_18)
        piece.configure(variable=setboard_support.PName)

        main.Pieces.append(piece)


if __name__ == '__main__':
    print("test mode")
    vp_start_gui()
