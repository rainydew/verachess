#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 06, 2019 11:09:03 PM CST  platform: Windows NT

import sys
from typing import List
from tkinter import CallWrapper
from setboard_global import Globals
from consts import Pieces

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

PName = FlipVar = C960switch = RrCol = LrCol = Mover = Drawmove = Totalmove = EpCol = None  # type: tk.StringVar
Wkcast = Wqcast = Bkcast = Bqcast = None    # type: tk.IntVar
CellValues = None  # type: List[List[tk.StringVar]]


def set_Tk_var():
    global PName, FlipVar, CellValues, C960switch, RrCol, LrCol, Wkcast, Wqcast, Bkcast, Bqcast, Mover, Drawmove, \
        Totalmove, EpCol
    PName = tk.StringVar(value="K")
    FlipVar = tk.StringVar(value='翻转局面')
    CellValues = [[tk.StringVar(value="") for _ in range(8)] for _ in range(8)]
    C960switch = tk.StringVar(value="normal")
    RrCol = tk.StringVar(value="H")
    LrCol = tk.StringVar(value="A")
    C960switch.trace_variable("w", c960_switch_callback)
    Wkcast = tk.IntVar(value=1)
    Wqcast = tk.IntVar(value=1)
    Bkcast = tk.IntVar(value=1)
    Bqcast = tk.IntVar(value=1)
    Mover = tk.StringVar(value='w')
    Drawmove = tk.StringVar(value='0')
    Drawmove.trace_variable("w", drawmove_filter)
    Totalmove = tk.StringVar(value="1")
    Totalmove.trace_variable("w", totalmove_filter)
    EpCol = tk.StringVar(value="-")
    EpCol.trace_variable("w", epcol_filter)


def debug():    # todo: remove
    print(C960switch.get())


def c960_switch_callback(*args):
    main = Globals.Main
    if C960switch.get() == "c960":
        main.KingSide.configure(state='normal')
        main.QueenSide.configure(state='normal')
    else:
        main.KingSide.configure(state='disabled')
        main.QueenSide.configure(state='disabled')


def drawmove_filter(*args):
    try:
        if Drawmove.get() == "":
            return
        w = int(Drawmove.get())
        if w < 0:
            Drawmove.set("0")
        if w > 100:
            Drawmove.set("100")
    except:
        Drawmove.set("0")


def totalmove_filter(*args):
    try:
        if Totalmove.get() == "":
            return
        w = int(Totalmove.get())
        if w < 1:
            Totalmove.set("1")
    except:
        Totalmove.set("")


def epcol_filter(*args):
    if EpCol.get() and EpCol.get()[-1].lower() not in ("-", "a", "b", "c", "d", "e", "f", "g", "h"):
        EpCol.set("-")
    else:
        try:
            EpCol.set(EpCol.get()[-1].lower())
        except:
            EpCol.set("-")


# events
def cancel():
    print('setboard_support.cancel')
    sys.stdout.flush()


def clear():
    print('setboard_support.clear')
    sys.stdout.flush()


def confirm():
    print('setboard_support.confirm')
    sys.stdout.flush()


def copy():
    print('setboard_support.copy')
    sys.stdout.flush()


def flip():
    print('setboard_support.flip')
    sys.stdout.flush()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def cell_click(event: CallWrapper) -> None:
    r, c = Globals.Reverse_cell_names[str(event.widget)]
    piece = PName.get()
    if Globals.Board_array[r][c] == piece:
        Globals.Board_array[r][c] = None
        CellValues[r][c].set("")
    else:
        Globals.Board_array[r][c] = piece
        CellValues[r][c].set(Pieces[piece])


if __name__ == '__main__':
    import setboard

    setboard.vp_start_gui()
