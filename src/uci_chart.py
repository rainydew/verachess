#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Nov 13, 2019 05:32:05 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import uci_chart_support
from consts import Color, EngineConfigs
from tooltip import ToolTip
from typing import Optional, Dict, Union, List


def vp_start_gui():
    """Starting point when module is the main routine."""
    # test only
    global val, w, root
    from consts import Paths
    print("test mode")
    root = tk.Tk()
    uci_chart_support.set_Tk_var()
    top = Toplevel1(root)

    test_json = {
        "name": "stockfish",
        "ending": "\\r\\n",
        "command": "../engines/stockfish/stockfish191114_x64.exe",
        "country": "Italy",
        "protocol": "uci",
        "options": [
            {
                "name": "Debug Log File",
                "type": "string",
                "default": "",
                "value": ""
            },
            {
                "name": "Contempt",
                "type": "spin",
                "default": 24,
                "min": -100,
                "max": 100,
                "value": 24
            },
            {
                "name": "Analysis Contempt",
                "type": "combo",
                "default": "Both",
                "value": "Both",
                "choices": [
                    "Off",
                    "White",
                    "Black",
                    "Both"
                ]
            },
            {
                "name": "Threads",
                "type": "spin",
                "default": 1,
                "min": 1,
                "max": 512,
                "value": 1
            },
            {
                "name": "Hash",
                "type": "spin",
                "default": 16,
                "min": 1,
                "max": 131072,
                "value": 16
            },
            {
                "name": "Clear Hash",
                "type": "button"
            },
            {
                "name": "Ponder",
                "type": "check",
                "default": False,
                "value": False
            },
            {
                "name": "MultiPV",
                "type": "spin",
                "default": 1,
                "min": 1,
                "max": 500,
                "value": 1
            },
            {
                "name": "Skill Level",
                "type": "spin",
                "default": 20,
                "min": 0,
                "max": 20,
                "value": 20
            },
            {
                "name": "Move Overhead",
                "type": "spin",
                "default": 30,
                "min": 0,
                "max": 5000,
                "value": 30
            },
            {
                "name": "Minimum Thinking Time",
                "type": "spin",
                "default": 20,
                "min": 0,
                "max": 5000,
                "value": 20
            },
            {
                "name": "Slow Mover",
                "type": "spin",
                "default": 84,
                "min": 10,
                "max": 1000,
                "value": 84
            },
            {
                "name": "nodestime",
                "type": "spin",
                "default": 0,
                "min": 0,
                "max": 10000,
                "value": 0
            },
            {
                "name": "UCI_Chess960",
                "type": "check",
                "default": False,
                "value": False
            },
            {
                "name": "UCI_AnalyseMode",
                "type": "check",
                "default": False,
                "value": False
            },
            {
                "name": "UCI_LimitStrength",
                "type": "check",
                "default": False,
                "value": False
            },
            {
                "name": "UCI_Elo",
                "type": "spin",
                "default": 1350,
                "min": 1350,
                "max": 2850,
                "value": 1350
            },
            {
                "name": "SyzygyPath",
                "type": "string",
                "default": "<empty>",
                "value": "<empty>"
            },
            {
                "name": "SyzygyProbeDepth",
                "type": "spin",
                "default": 1,
                "min": 1,
                "max": 100,
                "value": 1
            },
            {
                "name": "Syzygy50MoveRule",
                "type": "check",
                "default": True,
                "value": True
            },
            {
                "name": "SyzygyProbeLimit",
                "type": "spin",
                "default": 7,
                "min": 0,
                "max": 7,
                "value": 7
            }
        ]
    }

    uci_chart_support.init(root, top, test_json)
    root.mainloop()
    print("Result:", top.Result)


w = None


def create_Toplevel1(root, test_json: Optional[Dict[str, Union[str, List[Dict[str, Union[str, int, bool, List[str]]]]]]]
                     = None, detect_command: Optional[str] = None):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    uci_chart_support.init(w, top, test_json, detect_command)
    return w, top


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("750x550+495+263")
        top.title("引擎UCI配置")
        top.configure(background="#d9d9d9")

        self.style.configure('Treeview', font="TkDefaultFont")

        self.Top = top
        self.Editing = False

        self.Scrolledtreeview1 = ScrolledTreeView(top)
        self.Scrolledtreeview1.place(x=0, y=0, height=470, width=750)
        columns = ["Name", "Type", "Default", "Require", "Value"]
        self.Columns = [x.lower() for x in columns]
        self.Scrolledtreeview1.configure(columns=columns)
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="No.")
        self.Scrolledtreeview1.column("#0", width="50")
        self.Scrolledtreeview1.bind('<Double-ButtonRelease-1>', lambda e: uci_chart_support.choose(e))
        self.Scrolledtreeview1.bind('<Button-3>', lambda e: uci_chart_support.tip(e))

        for col in columns:
            self.Scrolledtreeview1.heading(col, text=col)
            self.Scrolledtreeview1.column(col, width="80")

        if __name__ == '__main__':
            for i in range(100):
                if i % 5 == 0:
                    self.Scrolledtreeview1.insert("", "end", text=str(i), values=["Hash", "spin", "128",
                                                                                  "64~1024", "128"])
                elif i % 5 == 1:
                    self.Scrolledtreeview1.insert("", "end", text=str(i), values=["Ponder", "check", "false",
                                                                                  "", "false"])
                elif i % 5 == 2:
                    self.Scrolledtreeview1.insert("", "end", text=str(i), values=["SyzygyPath", "string", "",
                                                                                  "", ""])
                elif i % 5 == 3:
                    self.Scrolledtreeview1.insert("", "end", text=str(i), values=["Clear Hash", "button", "",
                                                                                  "", ""])
                else:
                    self.Scrolledtreeview1.insert("", "end", text=str(i), values=[
                        "UseBook", "combo", "anywhere", "none|analyze only|anywhere", "anywhere"])

        self.Redetect = tk.Button(top)
        self.Redetect.place(x=250, y=490, height=31, width=64)
        self.Redetect.configure(command=uci_chart_support.detect_again)
        self.Redetect.configure(background="#d9d9d9")
        self.Redetect.configure(foreground=Color.blue)
        self.Redetect.configure(text='''重新检测''')
        ToolTip(self.Redetect, "再次打开引擎，以检查引擎uci选项是否改动。新引擎会自动检测，"
                               "在引擎升级变更的时候需要重新检测")

        self.Default = tk.Button(top)
        self.Default.place(x=360, y=490, height=31, width=64)
        self.Default.configure(command=uci_chart_support.default)
        self.Default.configure(background="#d9d9d9")
        self.Default.configure(text='''重置''')

        self.Confirm = tk.Button(top)
        self.Confirm.place(x=470, y=490, height=31, width=64)
        self.Confirm.configure(command=uci_chart_support.confirm)
        self.Confirm.configure(background="#d9d9d9")
        self.Confirm.configure(text='''确定''')

        self.Cancel = tk.Button(top)
        self.Cancel.place(x=580, y=490, height=31, width=64)
        self.Cancel.configure(command=uci_chart_support.cancel)
        self.Cancel.configure(background="#d9d9d9")
        self.Cancel.configure(text='''取消''')

        self.Label1 = tk.Label(top)
        self.Label1.place(x=25, y=490, height=26)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(text='''双击选项编辑，右击查看详细值''')

        self.Result = None


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
